---
type ImageLike = string | { src: string; alt?: string };

export interface ServicioFlexible {
  titulo: string;
  descripcion?: string;
  subtitulo?: string;
  cta?: { label: string; href: string };
  img?: ImageLike;
  imagen?: ImageLike;
  href?: string;
  invert?: boolean;
}

export interface Props {
  heading: string;
  subheading?: string;
  servicios: ServicioFlexible[];
}

const { heading, subheading, servicios } = Astro.props;

// Normaliza `img` | `imagen`
const items = servicios.map((s) => {
  const toImg = (v?: ImageLike) =>
    typeof v === "string" ? { src: v, alt: "" } : (v ?? { src: "", alt: "" });

  const a = toImg(s.img);
  const b = toImg(s.imagen);
  const image = a.src ? a : b;

  return {
    titulo: s.titulo,
    desc: s.descripcion ?? s.subtitulo ?? "",
    img: image.src,
    alt: image.alt || s.titulo,
    href: s.href ?? s.cta?.href ?? "#",
    ctaLabel: s.cta?.label ?? "Saber Más",
    invert: s.invert ?? false,
  };
});
---

<section class="relative py-14 bg-[linear-gradient(180deg,#4e7264_0%,#4e7264cc_100%)]">
  <div class="max-w-6xl mx-auto px-6 md:px-10">
    <header class="text-center mb-8">
      <h2 class="text-3xl md:text-4xl font-extrabold text-white drop-shadow">{heading}</h2>
      {subheading && <p class="text-white/90 mt-2">{subheading}</p>}
    </header>

    {items.map((s) => (
      <div class="mb-8 rounded-2xl bg-white/95 p-6 md:p-10 shadow-lg">
        <div class="grid md:grid-cols-2 items-center gap-8 md:gap-10">
          <!-- Columna de texto -->
          <div class={`${s.invert ? "md:order-2" : ""}`}>
            <div class="rounded-2xl border-[3px] border-[#3F665A] p-6 md:p-10 lg:p-14 bg-white">
              <h3 class="text-2xl font-bold text-[#3F665A] text-center mb-4">{s.titulo}</h3>

              {s.desc && (
                <p class="text-gray-800 font-semibold leading-relaxed mb-6 text-left text-lg">
                  {s.desc}
                </p>
              )}

              <div class="flex justify-center">
                <a
                  href={s.href}
                  class="inline-flex items-center justify-center px-8 py-3 rounded-lg
                         bg-[#3F665A] text-white font-bold hover:bg-[#33574D] transition"
                >
                  {s.ctaLabel}
                </a>
              </div>
            </div>
          </div>

          <!-- Columna de imagen -->
          <div class={`${s.invert ? "md:order-1" : ""}`}>
            {s.img ? (
              <div class="rounded-2xl overflow-hidden shadow-[0_20px_50px_rgba(0,0,0,0.15)] w-full mx-auto md:w-[90%]">
                <!-- Mantiene proporción 4:3 como en tu captura -->
                <div class="aspect-[4/3] w-full">
                  <img
                    src={s.img}
                    alt={s.alt}
                    loading="lazy"
                    class="h-full w-full object-cover"
                  />
                </div>
              </div>
            ) : (
              <div class="rounded-2xl bg-gray-100 aspect-[4/3]" />
            )}
          </div>
        </div>
      </div>
    ))}
  </div>
</section>
